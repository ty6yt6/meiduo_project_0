# 开发时使用的配置文件，代替settings.py

"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR指向的是第二个meiduo_mall

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&g%#4y#&%kmeiaplx7u%6prik^f&l8=q%^xoz^#ss7s&t$y$+-'

# SECURITY WARNING: don't run with debug turned on in production!
# 先改为False测试
DEBUG = False

ALLOWED_HOSTS = ["*",
    # 'api.beautymall.site',
    # '127.0.0.1',
    # 'localhost',
    # 'www.beauty.site',
    # "www.meiduo.site",

]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',#django默认的用户认证系统：里面处理完了跟用户相关的一切操作
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 用户模块注册
    # 导包路径：决定如何通过包路径找到对应的包，任何python项目都有，meiduo_mall也是导包路径，所以直接apps.users
    # 查看导包路径：import sys print(sys.path)
    "apps.users",

    # 注册解决跨域用的corsheaders
    "corsheaders",

    # 注册验证模块
    "apps.verifications",

    # 注册第三方登录模块
    "apps.oauth",

    # 注册收货地址省市区三级联动模块
    "apps.areas",

    # 注册首页类目子应用，只有注册了才能迁移建表
    "apps.contents",

    # 执行定时任务
    "django_crontab",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  #为了能让除了get请求以外的请求能顺利执行
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 为跨域添加中间件
    "corsheaders.middleware.CorsMiddleware",
]

# CORS跨域请求白名单设置
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://localhost:8080',
    'http://www.beauty.site:8080',
    "http://www.meiduo.site:8080",
    'http://www.beauty.site:8000',
    "http://www.meiduo.site:8000",
)
CORS_ALLOW_CREDENTIALS = True  # 跨域允许携带cookie

ROOT_URLCONF = 'meiduo_mall.urls'

# 配置模板
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        "HOST":"192.168.254.168",
        "PORT": 3306,
        "USER": "zjw",
        "PASSWORD": "ty6yt6",
        "NAME":"meiduo_mall_6",
    }
}

# 配置 Redis
# 以后还会追加购物车、浏览记录等项目
CACHES = {
    "default": { # 默认存储信息: 存到 0 号库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.254.168:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 将session存储在Redis的1号库
    "session": { # session 信息: 存到 1 号库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.254.168:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 将验证码存储在Redis的2号库
    "verify_code": { # 验证码 信息: 存到 2 号库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.254.168:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
# 配置session后端
SESSION_ENGINE = "django.contrib.sessions.backends.cache"#修改为redis存储session
SESSION_CACHE_ALIAS = "session"#存储session数据时使用的配置别名

# 配置日志信息，格式固定且通用
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,#300MB/个日志文件
            'backupCount': 10,#最多创建10个日志文件
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


# 指定Django程序默认的用户模型类为自定义的用户模型类
# AUTH_USER_MODEL = 'auth.User'  为Django默认的User
# AUTH_USER_MODEL = “子应用.自定义的用户模型类”
# 指定完用户模型类后，要迁移后才能使用
AUTH_USER_MODEL = 'users.User'

# 用于QQ登录的参数
QQ_CLIENT_ID = '101474184' # 我们申请的 客户端id
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c' # 我们申请的 客户端秘钥
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html' # 登录成功后回调的路径

# send_mail()方法会使用这些配置参数，连接到SMTP服务器上
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend" # 指定邮箱后端
EMAIL_HOST = "smtp.163.com" # 发邮件主机
EMAIL_PORT = 25 # 发邮件固定端口
EMAIL_HOST_USER = "zjw920815@163.com" # 授权的邮箱
EMAIL_HOST_PASSWORD = "DNKHQSQXKURYRKRE" # 邮箱授权时获得的密码，非邮箱注册登录密码
EMAIL_FROM = "美多商城<邮箱验证中心>" # 发件人抬头

# 邮箱激活链接
EMAIL_VERIFY_URL = "http://www.meiduo.site:8080/success_verify_email.html?token="

# 定时任务
CRONJOBS = [
    # 每1分钟生成一次首页静态文件
    # (定时时间,定时任务,>> + 日志文件路径)
    # BASE_DIR指向的是第二个meiduo_mall
    ('*/1 * * * *', 'apps.contents.crons.generate_static_index_html', '>> ' + os.path.join(BASE_DIR), 'logs/crontab.log')
]
# 解决 crontab 不支持中文的问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

# 指定自定义的文件存储类(覆盖了原有的路径)
DEFAULT_FILE_STORAGE = "meiduo_mall.utils.fastdfs.fdfs_storage.FastDFSStorage"

# 指定FastDFS服务器的位置
# 本身是"http://192.168.254.168:8888/"image.meiduo.site
FDFS_URL = "http://192.168.254.168:8888/"